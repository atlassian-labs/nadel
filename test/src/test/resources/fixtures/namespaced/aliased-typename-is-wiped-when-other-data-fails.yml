name: "aliased typename is wiped when other data fails"
enabled: true
overallSchema:
  Issues: |
    directive @namespaced on FIELD_DEFINITION

    type Query {
      issue: IssueQuery @namespaced
    }

    type IssueQuery {
      getIssue: Issue
    }

    type Issue {
      id: ID
      text: String
    }
  IssueSearch: |
    extend type IssueQuery {
      search: SearchResult
    }

    type SearchResult {
      id: ID
      count: Int
    }
underlyingSchema:
  Issues: |
    type Query {
      issue: IssueQuery
    }

    type IssueQuery {
      getIssue: Issue
    }

    type Issue {
      id: ID
      text: String
    }
  IssueSearch: |
    type Query {
      issue: IssueQuery
    }

    type IssueQuery {
      search: SearchResult
    }

    type SearchResult {
      id: ID
      count: Int
    }
query: |
  {
    issue {
      test: __typename
      getIssue {
        text
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: "Issues"
    request:
      query: |
        query {
          issue {
            getIssue {
              text
            }
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
        },
        "errors": [
          {
            "message": "Error"
          }
        ],
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "issue": null
    },
    "errors": [
      {
        "message": "Error",
        "locations": [],
        "extensions": {
          "classification": "DataFetchingException"
        }
      }
    ],
    "extensions": {}
  }
