name: "query with pass through interfaces and unions that DONT have __typename in them work as expected"
enabled: true
overallSchema:
  PetService: |
    type Query {
      pets(isLoyal: Boolean): [Pet]
      raining(isLoyal: Boolean): CatsAndDogs
    }
    interface Pet {
      name: String
      collar: Collar
      collarToRenamed: Collar @renamed(from: "collar")
    }
    type Cat implements Pet {
      name: String
      wearsBell: Boolean
      collar: Collar
      collarToRenamed: Collar @renamed(from: "collar")
    }
    type Dog implements Pet {
      name: String
      wearsCollar: Boolean
      collar: Collar
      collarToRenamed: Collar @renamed(from: "collar")
    }
    union CatsAndDogs = Cat | Dog
    interface Collar {
      color: String
      size: String
    }
    type DogCollar implements Collar {
      color: String
      size: String
    }
    type CatCollar implements Collar {
      color: String
      size: String
    }
  OwnerService: |
    type Query {
      owner(id: String): Owner
    }
    interface Owner {
      name: String
    }
    type CaringOwner implements Owner {
      name: String
      givesPats: Boolean
    }
    type CruelOwner implements Owner {
      name: String
      givesSmacks: Boolean
    }
underlyingSchema:
  PetService: |
    interface Collar {
      color: String
      size: String
    }

    interface Pet {
      collar: Collar
      name: String
      ownerIds: [String]
    }

    union CatsAndDogs = Cat | Dog

    type Cat implements Pet {
      collar: Collar
      name: String
      ownerIds: [String]
      wearsBell: Boolean
    }

    type CatCollar implements Collar {
      color: String
      size: String
    }

    type Dog implements Pet {
      collar: Collar
      name: String
      ownerIds: [String]
      wearsCollar: Boolean
    }

    type DogCollar implements Collar {
      color: String
      size: String
    }

    type Mutation {
      hello: String
    }

    type Query {
      hello: World
      pets(isLoyal: Boolean): [Pet]
      raining(isLoyal: Boolean): CatsAndDogs
    }

    type World {
      id: ID
      name: String
    }
  OwnerService: |
    interface Owner {
      name: String
    }

    type CaringOwner implements Owner {
      givesPats: Boolean
      name: String
    }

    type CruelOwner implements Owner {
      givesSmacks: Boolean
      name: String
    }

    type Query {
      owner(id: String): Owner
    }
query: |
  query petQ($isLoyal: Boolean) {
    pets(isLoyal: $isLoyal) {
      name
      ... on Dog {
        wearsCollar
      }
      ... on Cat {
        wearsBell
      }
    }
    raining(isLoyal: $isLoyal) {
      ... on Dog {
        wearsCollar
      }
      ... on Cat {
        wearsBell
      }
    }
  }
variables:
  isLoyal: true
serviceCalls:
  - serviceName: "PetService"
    request:
      query: |
        query petQ($v0: Boolean) {
          raining(isLoyal: $v0) {
            ... on Cat {
              wearsBell
            }
            ... on Dog {
              wearsCollar
            }
          }
        }
      variables:
        v0: true
      operationName: "petQ"
    # language=JSON
    response: |-
      {
        "data": {
          "raining": {
            "wearsCollar": true
          }
        },
        "extensions": {}
      }
  - serviceName: "PetService"
    request:
      query: |
        query petQ($v0: Boolean) {
          pets(isLoyal: $v0) {
            name
            ... on Cat {
              wearsBell
            }
            ... on Dog {
              wearsCollar
            }
          }
        }
      variables:
        v0: true
      operationName: "petQ"
    # language=JSON
    response: |-
      {
        "data": {
          "pets": [
            {
              "name": "Sparky",
              "wearsCollar": true
            },
            {
              "name": "Whiskers",
              "wearsBell": false
            }
          ]
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "pets": [
        {
          "name": "Sparky",
          "wearsCollar": true
        },
        {
          "name": "Whiskers",
          "wearsBell": false
        }
      ],
      "raining": {
        "wearsCollar": true
      }
    },
    "extensions": {
      "resultComplexity": {
        "totalNodeCount": 11,
        "serviceNodeCounts": {
          "PetService": 11
        },
        "fieldRenamesCount": 0,
        "typeRenamesCount": 0
      }
    }
  }
