name: "lower level interface fields which are renamed get typename added"
enabled: true
# language=GraphQL
overallSchema:
  PetService: |
    type Query {
      pets(isLoyal: Boolean): [Pet]
      raining(isLoyal: Boolean): CatsAndDogs
    }
    interface Pet {
      name: String
      collar: Collar
      collarToRenamed: Collar @renamed(from: "collar")
    }
    type Cat implements Pet {
      name: String
      wearsBell: Boolean
      collar: Collar
      collarToRenamed: Collar @renamed(from: "collar")
    }
    type Dog implements Pet {
      name: String
      wearsCollar: Boolean
      collar: Collar
      collarToRenamed: Collar @renamed(from: "collar")
    }
    union CatsAndDogs = Cat | Dog
    interface Collar {
      color: String
      size: String
    }
    type DogCollar implements Collar {
      color: String
      size: String
    }
    type CatCollar implements Collar {
      color: String
      size: String
    }
  OwnerService: |
    type Query {
      owner(id: String): Owner
    }
    interface Owner {
      name: String
    }
    type CaringOwner implements Owner {
      name: String
      givesPats: Boolean
    }
    type CruelOwner implements Owner {
      name: String
      givesSmacks: Boolean
    }
# language=GraphQL
underlyingSchema:
  PetService: |
    interface Collar {
      color: String
      size: String
    }

    interface Pet {
      collar: Collar
      name: String
      ownerIds: [String]
    }

    union CatsAndDogs = Cat | Dog

    type Cat implements Pet {
      collar: Collar
      name: String
      ownerIds: [String]
      wearsBell: Boolean
    }

    type CatCollar implements Collar {
      color: String
      size: String
    }

    type Dog implements Pet {
      collar: Collar
      name: String
      ownerIds: [String]
      wearsCollar: Boolean
    }

    type DogCollar implements Collar {
      color: String
      size: String
    }

    type Mutation {
      hello: String
    }

    type Query {
      hello: World
      pets(isLoyal: Boolean): [Pet]
      raining(isLoyal: Boolean): CatsAndDogs
    }

    type World {
      id: ID
      name: String
    }
  OwnerService: |
    interface Owner {
      name: String
    }

    type CaringOwner implements Owner {
      givesPats: Boolean
      name: String
    }

    type CruelOwner implements Owner {
      givesSmacks: Boolean
      name: String
    }

    type Query {
      owner(id: String): Owner
    }
# language=GraphQL
query: |
  query petQ($isLoyal: Boolean) {
    pets(isLoyal: $isLoyal) {
      name
      collarToRenamed {
        color
      }
    }
  }
variables:
  isLoyal: true
serviceCalls:
  - serviceName: "PetService"
    request:
      # language=GraphQL
      query: |
        query petQ {
          pets(isLoyal: true) {
            __typename__rename__collarToRenamed: __typename
            name
            ... on Cat {
              rename__collarToRenamed__collar: collar {
                color
              }
            }
            ... on Dog {
              rename__collarToRenamed__collar: collar {
                color
              }
            }
          }
        }
      variables: { }
      operationName: "petQ"
    # language=JSON
    response: |-
      {
        "data": {
          "pets": [
            {
              "name": "Sparky",
              "rename__collarToRenamed__collar": {
                "color": "blue"
              },
              "__typename__rename__collarToRenamed": "Dog"
            },
            {
              "name": "Whiskers",
              "rename__collarToRenamed__collar": {
                "color": "red"
              },
              "__typename__rename__collarToRenamed": "Cat"
            }
          ]
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "pets": [
        {
          "name": "Sparky",
          "collarToRenamed": {
            "color": "blue"
          }
        },
        {
          "name": "Whiskers",
          "collarToRenamed": {
            "color": "red"
          }
        }
      ]
    },
    "extensions": {
      "resultComplexity": {
        "totalNodeCount": 8,
        "serviceNodeCounts": {
          "PetService": 8
        },
        "fieldRenamesCount": 2,
        "typeRenamesCount": 0
      }
    }
  }
