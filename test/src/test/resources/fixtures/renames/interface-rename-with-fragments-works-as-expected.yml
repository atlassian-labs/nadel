name: interface rename with fragments works as expected
enabled: true
overallSchema:
  MyService: |
    type Query {
      hello: World
      renameObject: ObjectOverall @renamed(from: "renameObjectUnderlying") # the field is renamed
      renameInterface: InterfaceOverall @renamed(from: "renameInterfaceUnderlying")
      renameUnion: UnionOverall @renamed(from: "renameUnionUnderlying")
      renameInput(arg1: InputOverall!, arg2: URL, arg3: EnumOverall): String
      renameString: String @renamed(from: "renameStringUnderlying")
      typenameTest: TypenameTest
    }
    type World {
      id: ID
      name: String
    }
    type ObjectOverall implements InterfaceOverall @renamed(from: "ObjectUnderlying") {
      name: String
    }
    interface InterfaceOverall @renamed(from: "InterfaceUnderlying") {
      name: String
    }
    union UnionOverall @renamed(from: "UnionUnderlying") = X | Y
    type X @renamed(from: "XUnderlying") {
      x: Int
    }
    type Y @renamed(from: "YUnderlying") {
      y: Int
    }
    input InputOverall @renamed(from: "InputUnderlying") {
      inputVal: String
    }
    scalar URL @renamed(from: "String")
    enum EnumOverall @renamed(from: "EnumUnderlying") {
      X, Y
    }
    type TypenameTest {
      object: ObjectOverall
      objects: [ObjectOverall]
    }
underlyingSchema:
  MyService: |
    interface InterfaceUnderlying {
      name: String
    }

    union UnionUnderlying = XUnderlying | YUnderlying

    type ObjectUnderlying implements InterfaceUnderlying {
      name: String
    }

    type Query {
      hello: World
      renameInput(arg1: InputUnderlying!, arg2: String, arg3: EnumUnderlying): String
      renameInterfaceUnderlying: InterfaceUnderlying
      renameObjectUnderlying: ObjectUnderlying
      renameStringUnderlying: String
      renameUnionUnderlying: UnionUnderlying
      typenameTest: TypenameTest
    }

    type TypenameTest {
      object: ObjectUnderlying
      objects: [ObjectUnderlying]
    }

    type World {
      id: ID
      name: String
    }

    type XUnderlying {
      x: Int
    }

    type YUnderlying {
      y: Int
    }

    enum EnumUnderlying {
      X
      Y
    }

    input InputUnderlying {
      inputVal: String
    }
query: |
  query {
    renameObject {
      ... on InterfaceOverall {
        name
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: MyService
    request:
      query: |
        query {
          rename__renameObject__renameObjectUnderlying: renameObjectUnderlying {
            name
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "rename__renameObject__renameObjectUnderlying": {
            "name": "val"
          }
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "renameObject": {
        "name": "val"
      }
    },
    "extensions": {
      "resultComplexity": {
        "totalNodeCount": 2,
        "serviceNodeCounts": {
          "MyService": 2
        },
        "fieldRenamesCount": 1,
        "typeRenamesCount": 1
      }
    }
  }
