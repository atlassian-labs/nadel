name: "renamed field with normal field using same source"
enabled: true
overallSchema:
  Foo: |
    type Query {
      foo: Foo
    }
    type Foo {
      renamedField: String @renamed(from: "issue.field")
      issue: Issue
    }
    type Issue {
      fooDetail: Detail
    }
    type Detail {
      detailId: ID!
      name: String
    }
underlyingSchema:
  Foo: |
    type Detail {
      detailId: ID!
      name: String
    }

    type Foo {
      field: String
      issue: Issue
    }

    type Issue {
      field: String
      fooDetail: Detail
    }

    type Query {
      detail(detailIds: [ID]): Detail
      foo: Foo
    }
query: |
  query {
    foo {
      issue {
        fooDetail {
          name
        }
      }
      renamedField
    }
  }
variables: { }
serviceCalls:
  - serviceName: "Foo"
    request:
      query: |
        query {
          foo {
            __typename__deep_rename__renamedField: __typename
            issue {
              fooDetail {
                name
              }
            }
            deep_rename__renamedField__issue: issue {
              field
            }
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "foo": {
            "issue": {
              "fooDetail": {
                "name": "fooName"
              }
            },
            "__typename__deep_rename__renamedField": "Foo",
            "deep_rename__renamedField__issue": {
              "field": "field"
            }
          }
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "foo": {
        "issue": {
          "fooDetail": {
            "name": "fooName"
          }
        },
        "renamedField": "field"
      }
    },
    "extensions": {}
  }
