name: "all fields in a selection set are removed"
enabled: false
overallSchema:
  IssueService: |
    type Query {
      issues(jql: String): [Issue]
      issueById(id: String): Issue
    }
    type Issue {
      id: ID
      key: String
      summary: String
      description: String
      epic: Epic
      reporter: User @hydrated(service: "UserService" field: "userById" arguments: [{name: "id" value: "$source.reporterId"}])
      comments: [Comment] @hydrated(service: "CommentService" field: "commentById" arguments: [{name: "id" value: "$source.commentIds"}])
    }
    type Epic {
      id: ID
      title: String
      description: String
    }
  UserService: |
    type Query {
      users(ids: [ID]): [User]
      userById(id: ID): User
    }
    type User {
      userId: ID
      displayName: String
      avatarUrl: String
    }
  CommentService: |
    type Query {
      comments(ids: [ID]): [Comment]
      commentById(id: ID): Comment
    }
    type Comment {
      id: ID
      commentText: String @renamed(from: "text")
      created: String
      author: User @hydrated(service: "UserService" field: "userById" arguments: [{name: "id" value: "$source.authorId"}])
    }
underlyingSchema:
  IssueService: |
    type Epic {
      description: String
      id: ID
      title: String
    }

    type Issue {
      commentIds: [ID]
      description: String
      epic: Epic
      id: ID
      key: String
      reporterId: ID
      summary: String
    }

    type Query {
      issueById(id: String): Issue
      issues(jql: String): [Issue]
    }
  UserService: |
    type Query {
      users(ids: [ID]): [User]
      userById(id: ID): User
    }

    type User {
      userId: ID
      displayName: String
      avatarUrl: String
    }
  CommentService: |
    type Query {
      comments(ids: [ID]): [Comment]
      commentById(id: ID): Comment
    }

    type Comment {
      id: ID
      text: String
      created: String
      authorId: ID
    }
query: |
  query {
    issueById(id: "I1") {
      id
      epic {
        title
        description
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: "IssueService"
    request:
      query: |
        query nadel_2_IssueService {
          issueById(id: "I1") {
            id
            epic {
              empty_selection_set_typename__UUID: __typename
            }
          }
        }
      variables: { }
      operationName: "nadel_2_IssueService"
    # language=JSON
    response: |-
      {
        "data": {
          "issueById": {
            "id": "I1",
            "epic": {
              "empty_selection_set_typename__UUID": "Issue"
            }
          }
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "errors": [
      {
        "path": [
          "issueById",
          "epic",
          "title"
        ],
        "message": "removed field",
        "extensions": {
          "classification": "ExecutionAborted"
        }
      },
      {
        "path": [
          "issueById",
          "epic",
          "description"
        ],
        "message": "removed field",
        "extensions": {
          "classification": "ExecutionAborted"
        }
      }
    ],
    "data": {
      "issueById": {
        "id": "I1",
        "epic": {
          "title": null,
          "description": null
        }
      }
    },
    "extensions": {}
  }
