name: "one of top level fields is removed"
enabled: false
# language=GraphQL
overallSchema:
  IssueService: |
    type Query {
      issues(jql: String): [Issue]
      issueById(id: String): Issue
    }
    type Issue {
      id: ID
      key: String
      summary: String
      description: String
      epic: Epic
      reporter: User
      @hydrated(
        service: "UserService"
        field: "userById"
        arguments: [{name: "id" value: "$source.reporterId"}]
      )
      comments: [Comment]
      @hydrated(
        service: "CommentService"
        field: "commentById"
        arguments: [{name: "id" value: "$source.commentIds"}]
      )
    }
    type Epic {
      id: ID
      title: String
      description: String
    }
  UserService: |
    type Query {
      users(ids: [ID]): [User]
      userById(id: ID): User
    }
    type User {
      userId: ID
      displayName: String
      avatarUrl: String
    }
  CommentService: |
    type Query {
      comments(ids: [ID]): [Comment]
      commentById(id: ID): Comment
    }
    type Comment {
      id: ID
      commentText: String @renamed(from: "text")
      created: String
      author: User
      @hydrated(
        service: "UserService"
        field: "userById"
        arguments: [{name: "id" value: "$source.authorId"}]
      )
    }
# language=GraphQL
underlyingSchema:
  IssueService: |
    type Epic {
      description: String
      id: ID
      title: String
    }

    type Issue {
      commentIds: [ID]
      description: String
      epic: Epic
      id: ID
      key: String
      reporterId: ID
      summary: String
    }

    type Query {
      issueById(id: String): Issue
      issues(jql: String): [Issue]
    }
  CommentService: |
    type Comment {
      authorId: ID
      created: String
      id: ID
      text: String
    }

    type Query {
      commentById(id: ID): Comment
      comments(ids: [ID]): [Comment]
    }
  UserService: |
    type Query {
      userById(id: ID): User
      users(ids: [ID]): [User]
    }

    type User {
      avatarUrl: String
      displayName: String
      userId: ID
    }
# language=GraphQL
query: |
  query {
    commentById(id: "C1") {
      id
    }
    issues {
      key
    }
  }
variables: { }
serviceCalls:
  - serviceName: "IssueService"
    request:
      # language=GraphQL
      query: |
        query nadel_2_IssueService {
          issues {
            key
          }
        }
      variables: { }
      operationName: "nadel_2_IssueService"
    # language=JSON
    response: |-
      {
        "data": {
          "issues": [
            {
              "key": "WORK-I1"
            },
            {
              "key": "WORK-I2"
            }
          ]
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "errors": [
      {
        "path": [
          "commentById"
        ],
        "message": "removed field",
        "extensions": {
          "classification": "ExecutionAborted"
        }
      }
    ],
    "data": {
      "commentById": null,
      "issues": [
        {
          "key": "WORK-I1"
        },
        {
          "key": "WORK-I2"
        }
      ]
    },
    "extensions": {
      "resultComplexity": {
        "totalNodeCount": 0,
        "serviceNodeCounts": {
          "IssueService": 0
        },
        "fieldRenamesCount": 0,
        "typeRenamesCount": 0
      }
    }
  }
