name: "restricted field inside hydration via fragments used twice"
enabled: false
overallSchema:
  UserService: |
    type Query {
      userByIds(id: ID): User
    }
    type User {
      id: ID
      restricted: String
    }
  Issues: |
    type Query {
      issue: Issue
    }
    type Issue {
      id: ID
      relatedIssue: Issue
      author: User @hydrated(service: "UserService" field: "usersById" arguments: [{name: "id" value: "$source.authorId"}] identifiedBy: "id")
    }
underlyingSchema:
  UserService: |
    type Query {
      usersById(id: [ID]): [User]
    }

    type User {
      id: ID
      restricted: String
    }
  Issues: |
    type Issue {
      authorId: ID
      id: ID
      relatedIssue: Issue
    }

    type Query {
      issue: Issue
      myIssue: Issue
    }
query: |
  query {
    issue {
      ...IssueFragment
      relatedIssue {
        ...IssueFragment
      }
    }
  }

  fragment IssueFragment on Issue {
    id
    author {
      id
      restricted
    }
  }
variables: { }
serviceCalls:
  - serviceName: "Issues"
    request:
      query: |
        query nadel_2_Issues {
          issue {
            relatedIssue {
              authorId
              id
            }
            authorId
            id
          }
        }
      variables: { }
      operationName: "nadel_2_Issues"
    # language=JSON
    response: |-
      {
        "data": {
          "issue": {
            "id": "ID1",
            "authorId": "USER-1",
            "relatedIssue": {
              "id": "ID2",
              "authorId": "USER-2"
            }
          }
        },
        "extensions": {}
      }
  - serviceName: "UserService"
    request:
      query: |
        query nadel_2_UserService($v0: [ID]) {
          usersById(id: $v0) {
            id
            object_identifier__UUID: id
          }
        }
      variables:
        v0:
          - "USER-1"
          - "USER-2"
      operationName: "nadel_2_UserService"
    # language=JSON
    response: |-
      {
        "data": {
          "usersById": [
            {
              "id": "USER-1",
              "object_identifier__UUID": "USER-1"
            },
            {
              "id": "USER-2",
              "object_identifier__UUID": "USER-2"
            }
          ]
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "errors": [
      {
        "path": [
          "issue",
          "author",
          "restricted"
        ],
        "message": "removed field",
        "extensions": {
          "classification": "ExecutionAborted"
        }
      }
    ],
    "data": {
      "issue": {
        "id": "ID1",
        "author": {
          "id": "USER-1",
          "restricted": null
        },
        "relatedIssue": {
          "id": "ID2",
          "author": {
            "id": "USER-2",
            "restricted": null
          }
        }
      }
    },
    "extensions": {}
  }
