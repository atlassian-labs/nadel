name: complex identified by input is null
enabled:
  current: false
  nextgen: true
overallSchema:
  UserService: |
    type Query {
      usersByIds(ids: [ID]): [User]
    }
    type User {
      id: ID
      name: String
    }
  Issues: |
    type Query {
      issues: [Issue]
    }
    type Issue {
      id: ID
      authors: [User] @hydrated(
        service: "UserService"
        field: "usersByIds"
        arguments: [
          {name: "ids" value: "$source.authorIds"}
        ]
        inputIdentifiedBy: [
          {sourceId: "authorIds" resultId: "id"}
        ]
        batchSize: 2
      )
    }
underlyingSchema:
  UserService: |
    type Query {
      usersByIds(ids: [ID]): [User]
    }

    type User {
      id: ID
      name: String
    }
  Issues: |
    type Issue {
      authorIds: [ID]
      id: ID
    }

    type Query {
      issues: [Issue]
    }
query: |
  query {
    issues {
      id
      authors {
        name
      }
    }
  }
variables: { }
serviceCalls:
  current: [ ]
  nextgen:
    - serviceName: Issues
      request:
        query: |
          query {
            issues {
              __typename__batch_hydration__authors: __typename
              batch_hydration__authors__authorIds: authorIds
              id
            }
          }
        variables: { }
      # language=JSON
      response: |-
        {
          "data": {
            "issues": [
              {
                "__typename__batch_hydration__authors": "Issue",
                "id": "ISSUE-1",
                "batch_hydration__authors__authorIds": null
              }
            ]
          },
          "extensions": {}
        }
# language=JSON
response: |-
  {
    "data": {
      "issues": [
        {
          "id": "ISSUE-1",
          "authors": null
        }
      ]
    },
    "extensions": {}
  }
