name: complex identified by hydration batching returns null batch
enabled:
  current: false
  nextgen: true
overallSchema:
  service2: |
    type Query {
      barsById(id: [ID]): [Bar]
    }
    type Bar {
      id: ID
      name: String
    }
  service1: |
    type Query {
      foo: Foo
    }
    type Foo {
      id: ID
      bar: [Bar] @hydrated(
        service: "service2"
        field: "barsById"
        arguments: [{name: "id" value: "$source.barId"}]
        inputIdentifiedBy: [{sourceId: "barId" resultId: "id"}]
      )
    }
underlyingSchema:
  service2: |
    type Bar {
      id: ID
      name: String
    }

    type Query {
      barsById(id: [ID]): [Bar]
    }
  service1: |
    type Foo {
      barId: [ID]
      id: ID
    }

    type Query {
      foo: Foo
    }
query: |
  query {
    foo {
      bar {
        name
      }
    }
  }
variables: { }
serviceCalls:
  current: [ ]
  nextgen:
    - serviceName: service1
      request:
        query: |
          query {
            foo {
              __typename__batch_hydration__bar: __typename
              batch_hydration__bar__barId: barId
            }
          }
        variables: { }
      # language=JSON
      response: |-
        {
          "data": {
            "foo": {
              "__typename__batch_hydration__bar": "Foo",
              "batch_hydration__bar__barId": [
                "barId1",
                "barId2",
                "barId3"
              ]
            }
          },
          "extensions": {}
        }
    - serviceName: service2
      request:
        query: |
          query {
            barsById(id: ["barId1", "barId2", "barId3"]) {
              batch_hydration__bar__id: id
              name
            }
          }
        variables: { }
      # language=JSON
      response: |-
        {
          "extensions": {}
        }
# language=JSON
response: |-
  {
    "data": {
      "foo": {
        "bar": [
          null,
          null,
          null
        ]
      }
    },
    "extensions": {}
  }
