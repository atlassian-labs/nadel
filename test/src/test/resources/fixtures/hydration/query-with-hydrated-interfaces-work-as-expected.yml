name: "query with hydrated interfaces work as expected"
enabled: true
# todo: handle synthetic fields in interfaces better
overallSchema:
  PetService: |
    type Query {
      pets(isLoyal: Boolean): [Pet]
      raining(isLoyal: Boolean): CatsAndDogs
    }
    interface Pet {
      name: String
      owners: [Owner] @hydrated(service: "OwnerService" field: "ownerById" arguments: [{name: "id" value: "$source.ownerIds"}])
      collar: Collar
      collarToRenamed: Collar @renamed(from: "collar")
    }
    type Cat implements Pet {
      name: String
      wearsBell: Boolean
      owners: [Owner] @hydrated(service: "OwnerService" field: "ownerById" arguments: [{name: "id" value: "$source.ownerIds"}])
      collar: Collar
      collarToRenamed: Collar @renamed(from: "collar")
    }
    type Dog implements Pet {
      name: String
      wearsCollar: Boolean
      owners: [Owner] @hydrated(service: "OwnerService" field: "ownerById" arguments: [{name: "id" value: "$source.ownerIds"}])
      collar: Collar
      collarToRenamed: Collar @renamed(from: "collar")
    }
    union CatsAndDogs = Cat | Dog
    interface Collar {
      color: String
      size: String
    }
    type DogCollar implements Collar {
      color: String
      size: String
    }
    type CatCollar implements Collar {
      color: String
      size: String
    }
  OwnerService: |
    type Query {
      ownerById(id: String): Owner
    }
    interface Owner {
      name: String
    }
    type CaringOwner implements Owner {
      name: String
      givesPats: Boolean
    }
    type CruelOwner implements Owner {
      name: String
      givesSmacks: Boolean
    }
underlyingSchema:
  PetService: |
    interface Collar {
      color: String
      size: String
    }

    interface Pet {
      collar: Collar
      name: String
      ownerIds: [String]
    }

    union CatsAndDogs = Cat | Dog

    type Cat implements Pet {
      collar: Collar
      name: String
      ownerIds: [String]
      wearsBell: Boolean
    }

    type CatCollar implements Collar {
      color: String
      size: String
    }

    type Dog implements Pet {
      collar: Collar
      name: String
      ownerIds: [String]
      wearsCollar: Boolean
    }

    type DogCollar implements Collar {
      color: String
      size: String
    }

    type Mutation {
      hello: String
    }

    type Query {
      hello: World
      pets(isLoyal: Boolean): [Pet]
      raining(isLoyal: Boolean): CatsAndDogs
    }

    type World {
      id: ID
      name: String
    }
  OwnerService: |
    interface Owner {
      name: String
    }

    type CaringOwner implements Owner {
      givesPats: Boolean
      name: String
    }

    type CruelOwner implements Owner {
      givesSmacks: Boolean
      name: String
    }

    type Query {
      ownerById(id: String): Owner
    }
query: |
  query petQ($isLoyal: Boolean) {
    pets(isLoyal: $isLoyal) {
      name
      owners {
        name
        ... on CaringOwner {
          givesPats
        }
        ... on CruelOwner {
          givesSmacks
        }
      }
    }
  }
variables:
  isLoyal: true
serviceCalls:
  - serviceName: "PetService"
    request:
      query: |
        query petQ {
          pets(isLoyal: true) {
            __typename__hydration__owners: __typename
            name
            ... on Cat {
              hydration__owners__ownerIds: ownerIds
            }
            ... on Dog {
              hydration__owners__ownerIds: ownerIds
            }
          }
        }
      variables: { }
      operationName: "petQ"
    # language=JSON
    response: |-
      {
        "data": {
          "pets": [
            {
              "name": "Sparky",
              "hydration__owners__ownerIds": [
                "dearly"
              ],
              "__typename__hydration__owners": "Dog"
            },
            {
              "name": "Whiskers",
              "hydration__owners__ownerIds": [
                "cruella"
              ],
              "__typename__hydration__owners": "Cat"
            }
          ]
        },
        "extensions": {}
      }
  - serviceName: "OwnerService"
    request:
      query: |
        query petQ {
          ownerById(id: "dearly") {
            name
            ... on CaringOwner {
              givesPats
            }
            ... on CruelOwner {
              givesSmacks
            }
          }
        }
      variables: { }
      operationName: "petQ"
    # language=JSON
    response: |-
      {
        "data": {
          "ownerById": {
            "name": "Mr Dearly",
            "givesPats": true
          }
        },
        "extensions": {}
      }
  - serviceName: "OwnerService"
    request:
      query: |
        query petQ {
          ownerById(id: "cruella") {
            name
            ... on CaringOwner {
              givesPats
            }
            ... on CruelOwner {
              givesSmacks
            }
          }
        }
      variables: { }
      operationName: "petQ"
    # language=JSON
    response: |-
      {
        "data": {
          "ownerById": {
            "name": "Cruella De Vil",
            "givesSmacks": true
          }
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "pets": [
        {
          "name": "Sparky",
          "owners": [
            {
              "name": "Mr Dearly",
              "givesPats": true
            }
          ]
        },
        {
          "name": "Whiskers",
          "owners": [
            {
              "name": "Cruella De Vil",
              "givesSmacks": true
            }
          ]
        }
      ]
    },
    "extensions": {
      "resultComplexity": {
        "totalNodeCount": 14,
        "serviceNodeCounts": {
          "PetService": 8,
          "OwnerService": 6
        },
        "fieldRenamesCount": 0,
        "typeRenamesCount": 0
      }
    }
  }
