name: synthetic hydration call with two argument values from original field arguments
enabled: true
overallSchema:
  UserService: |
    type Query {
      usersQuery: UsersQuery
    }
    type UsersQuery {
      usersByIds(extraArg1: String, extraArg2: Int, id: [ID]): [User]
    }
    type User {
      id: ID
      name: String
    }
  Issues: |
    type Query {
      issues: [Issue]
    }
    type Issue {
      id: ID
      author(extraArg1: String, extraArg2: Int): User @hydrated(
        service: "UserService"
        field: "usersQuery.usersByIds"
        arguments: [
          {name: "extraArg1" value: "$argument.extraArg1"}
          {name: "extraArg2" value: "$argument.extraArg2"}
          {name: "id" value: "$source.authorId"}
        ]
        identifiedBy: "id"
        batchSize: 2
      )
    }
underlyingSchema:
  UserService: |
    type Query {
      usersQuery: UsersQuery
    }

    type User {
      id: ID
      name: String
    }

    type UsersQuery {
      usersByIds(extraArg1: String, extraArg2: Int, id: [ID]): [User]
    }
  Issues: |
    type Issue {
      authorId: ID
      id: ID
    }

    type Query {
      issues: [Issue]
    }
query: |
  query {
    issues {
      id
      author(extraArg1: "extraArg1", extraArg2: 10) {
        name
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: Issues
    request:
      query: |
        query {
          issues {
            __typename__batch_hydration__author: __typename
            batch_hydration__author__authorId: authorId
            id
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "issues": [
            {
              "__typename__batch_hydration__author": "Issue",
              "id": "ISSUE-1",
              "batch_hydration__author__authorId": "USER-1"
            }
          ]
        },
        "extensions": {}
      }
  - serviceName: UserService
    request:
      query: |
        query {
          usersQuery {
            usersByIds(extraArg1: "extraArg1", extraArg2: 10, id: ["USER-1"]) {
              batch_hydration__author__id: id
              name
            }
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "usersQuery": {
            "usersByIds": [
              {
                "name": "User 1",
                "batch_hydration__author__id": "USER-1"
              }
            ]
          }
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "issues": [
        {
          "id": "ISSUE-1",
          "author": {
            "name": "User 1"
          }
        }
      ]
    },
    "extensions": {}
  }
