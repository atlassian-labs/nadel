name: "solitary polymorphic hydration"
enabled: true
# language=GraphQL
overallSchema:
  pets: |
    type Query {
      petById(id: ID): Pet
    }

    type Pet {
      id: ID
      breed: String
    }
  people: |
    type Query {
      humanById(id: ID): Human
    }

    type Human {
      id: ID
      name: String
    }
  foo: |
    type Query {
      foo: [Foo]
    }

    type Foo {
      id: ID
      dataId: ID
      data: Data
      @hydrated(
        service: "pets"
        field: "petById"
        arguments: [
          {name: "id" value: "$source.dataId"}
        ]
      )
      @hydrated(
        service: "people"
        field: "humanById"
        arguments: [
          {name: "id" value: "$source.dataId"}
        ]
      )
    }

    union Data = Pet | Human
# language=GraphQL
underlyingSchema:
  pets: |
    type Query {
      petById(id: ID): Pet
    }

    type Pet {
      id: ID
      breed: String
    }
  people: |
    type Query {
      humanById(id: ID): Human
    }

    type Human {
      id: ID
      name: String
    }
  foo: |
    type Query {
      foo: [Foo]
    }

    type Foo {
      id: ID
      dataId: ID
    }
# language=GraphQL
query: |
  query {
    foo {
      __typename
      id
      data {
        ... on Pet {
          __typename
          id
          breed
        }
        ... on Human {
          __typename
          id
          name
        }
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: "foo"
    request:
      # language=GraphQL
      query: |
        query {
          foo {
            __typename
            __typename__hydration__data: __typename
            hydration__data__dataId: dataId
            hydration__data__dataId: dataId
            id
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "foo": [
            {
              "__typename": "Foo",
              "__typename__hydration__data": "Foo",
              "hydration__data__dataId": "PET-0",
              "id": "FOO-0"
            },
            {
              "__typename": "Foo",
              "__typename__hydration__data": "Foo",
              "hydration__data__dataId": "HUMAN-0",
              "id": "FOO-1"
            }]
        },
        "extensions": {}
      }
  - serviceName: "pets"
    request:
      # language=GraphQL
      query: |
        query {
          petById(id: "PET-0") {
            __typename
            __typename__type_filter__id: __typename
            __typename__type_filter__name: __typename
            breed
            id
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "petById": {
            "__typename": "Pet",
            "__typename__type_filter__id": "Pet",
            "__typename__type_filter__name": "Pet",
            "id": "PET-0",
            "breed": "Akita"
          }
        },
        "extensions": {}
      }
  - serviceName: "people"
    request:
      # language=GraphQL
      query: |
        query {
          humanById(id: "HUMAN-0") {
            __typename
            __typename__type_filter__id: __typename
            __typename__type_filter__breed: __typename
            id
            name
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "humanById": {
            "__typename": "Human",
            "__typename__type_filter__id": "Human",
            "__typename__type_filter__breed": "Human",
            "id": "HUMAN-0",
            "name": "Fanny Longbottom"
          }
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "foo": [
        {
          "__typename": "Foo",
          "id": "FOO-0",
          "data": {
            "__typename": "Pet",
            "id": "PET-0",
            "breed": "Akita"
          }
        },
        {
          "__typename": "Foo",
          "id": "FOO-1",
          "data": {
            "__typename": "Human",
            "id": "HUMAN-0",
            "name": "Fanny Longbottom"
          }
        }
      ]
    },
    "extensions": {}
  }
