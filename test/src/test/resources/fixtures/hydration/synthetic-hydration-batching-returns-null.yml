name: "synthetic hydration batching returns null"
enabled: true
overallSchema:
  service2: |
    type Query {
      barsQuery: BarsQuery
    }
    type BarsQuery {
      barsById(id: [ID]): [Bar]
    }
    type Bar {
      id: ID
      name: String
    }
  service1: |
    type Query {
      foo: Foo
    }
    type Foo {
      id: ID
      bar: [Bar] @hydrated(service: "service2" field: "barsQuery.barsById" arguments: [{name: "id" value: "$source.barId"}])
    }
underlyingSchema:
  service2: |
    type Bar {
      id: ID
      name: String
    }

    type BarsQuery {
      barsById(id: [ID]): [Bar]
    }

    type Query {
      barsQuery: BarsQuery
    }
  service1: |
    type Foo {
      barId: [ID]
      id: ID
    }

    type Query {
      foo: Foo
    }
query: |
  query {
    foo {
      bar {
        name
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: "service1"
    request:
      query: |
        query {
          foo {
            __typename__batch_hydration__bar: __typename
            batch_hydration__bar__barId: barId
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "foo": {
            "__typename__batch_hydration__bar": "Foo",
            "batch_hydration__bar__barId": [
              "barId1",
              "barId2",
              "barId3"
            ]
          }
        },
        "extensions": {}
      }
  - serviceName: "service2"
    request:
      query: |
        query ($v0: [ID]) {
          barsQuery {
            barsById(id: $v0) {
              batch_hydration__bar__id: id
              name
            }
          }
        }
      variables:
        v0:
          - "barId1"
          - "barId2"
          - "barId3"
    # language=JSON
    response: |-
      {
        "data": null,
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "foo": {
        "bar": [
          null,
          null,
          null
        ]
      }
    },
    "extensions": {}
  }
