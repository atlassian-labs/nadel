name: "new index hydration all null ids"
enabled: true
# language=GraphQL
overallSchema:
  Issues: |
    type Query {
      issueById(id: ID!): Issue!
    }
    type Issue {
      id: ID!
      key: String
      collaborators: [User]
        @hydrated(
          service: "Users"
          field: "usersByIds"
          arguments: [
            {name: "ids", value: "$source.collaboratorIds"}
          ]
          identifiedBy: "id"
          indexed: true
        )
    }
  Users: |
    type Query {
      usersByIds(ids: [ID!]!): [User]
    }
    type User {
      id: ID!
      name: String
    }
# language=GraphQL
underlyingSchema:
  Issues: |
    type Query {
      issueById(id: ID!): Issue!
    }
    type Issue {
      id: ID!
      key: String
      collaboratorIds: [ID]
    }
  Users: |
    type Query {
      usersByIds(ids: [ID!]!): [User]
    }
    type User {
      id: ID!
      name: String
    }
# language=GraphQL
query: |
  query {
    issueById(id: "10000") {
      key
      collaborators {
        __typename
        name
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: "Issues"
    request:
      # language=GraphQL
      query: |
        {
          issueById(id: "10000") {
            __typename__batch_hydration__collaborators: __typename
            batch_hydration__collaborators__collaboratorIds: collaboratorIds
            key
          }
        }
    # language=JSON
    response: |
      {
        "data": {
          "issueById": {
            "__typename__batch_hydration__collaborators": "Issue",
            "batch_hydration__collaborators__collaboratorIds": [
              null,
              null
            ],
            "key": "GQLGW-1000"
          }
        }
      }
# language=JSON
response: |
  {
    "data": {
      "issueById": {
        "key": "GQLGW-1000",
        "collaborators": null
      }
    },
    "errors": []
  }
