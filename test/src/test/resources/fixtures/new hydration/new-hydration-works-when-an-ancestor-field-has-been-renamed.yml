name: "new hydration works when an ancestor field has been renamed"
enabled: true
# language=GraphQL
overallSchema:
  IssueService: |
    type DevOpsIssue @renamed(from: "Issue") {
      id: ID
    }
    type DevOpsRelationship @renamed(from: "Relationship") {
      devOpsIssue: DevOpsIssue
      @hydrated(
        service: "IssueService"
        field: "issue"
        arguments: [{name: "id" value: "$source.issueId"}]
      )
    }
    type DevOpsRelationshipConnection @renamed(from: "RelationshipConnection") {
      nodes: [DevOpsRelationship]
    }
    type Query {
      devOpsRelationships: DevOpsRelationshipConnection @renamed(from: "relationships")
      devOpsIssue(id: ID): DevOpsIssue @renamed(from: "issue")
      issue(id: ID): DevOpsIssue @hidden
    }
# language=GraphQL
underlyingSchema:
  IssueService: |
    type Issue {
      id: ID
    }

    type Query {
      issue(id: ID): Issue
      relationships: RelationshipConnection
    }

    type Relationship {
      issueId: ID
    }

    type RelationshipConnection {
      nodes: [Relationship]
    }
# language=GraphQL
query: |
  query {
    devOpsRelationships {
      nodes {
        devOpsIssue {
          id
        }
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: "IssueService"
    request:
      # language=GraphQL
      query: |
        query {
          rename__devOpsRelationships__relationships: relationships {
            nodes {
              __typename__hydration__devOpsIssue: __typename
              hydration__devOpsIssue__issueId: issueId
            }
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "rename__devOpsRelationships__relationships": {
            "nodes": [
              {
                "__typename__hydration__devOpsIssue": "Relationship",
                "hydration__devOpsIssue__issueId": "1"
              }
            ]
          }
        },
        "extensions": {}
      }
  - serviceName: "IssueService"
    request:
      # language=GraphQL
      query: |
        query {
          issue(id: "1") {
            id
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "issue": {
            "id": "1"
          }
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "devOpsRelationships": {
        "nodes": [
          {
            "devOpsIssue": {
              "id": "1"
            }
          }
        ]
      }
    },
    "extensions": {}
  }
