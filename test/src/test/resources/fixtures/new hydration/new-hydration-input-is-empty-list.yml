name: "new hydration input is empty list"
enabled: true
# language=GraphQL
overallSchema:
  UserService: |
    type Query {
      userById(id: ID!): User
    }
    type User {
      id: ID
      name: String
    }
  Issues: |
    type Query {
      issues: [Issue]
    }
    type Issue {
      id: ID
      author: [User] @hydrated(
        service: "UserService"
        field: "userById"
        arguments: [
          {name: "id" value: "$source.authorIds"}
        ]
      )
    }
# language=GraphQL
underlyingSchema:
  UserService: |
    type Query {
      userById(id: ID!): User
    }

    type User {
      id: ID
      name: String
    }
  Issues: |
    type Issue {
      id: ID!
      authorIds: [ID]
    }

    type Query {
      issues: [Issue]
    }
# language=GraphQL
query: |
  query {
    issues {
      id
      author {
        name
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: "Issues"
    request:
      # language=GraphQL
      query: |
        query {
          issues {
            __typename__hydration__author: __typename
            hydration__author__authorIds: authorIds
            id
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "issues": [
            {
              "__typename__hydration__author": "Issue",
              "id": "ISSUE-1",
              "hydration__author__authorIds": null
            }
          ]
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "issues": [
        {
          "id": "ISSUE-1",
          "author": []
        }
      ]
    },
    "extensions": {}
  }
