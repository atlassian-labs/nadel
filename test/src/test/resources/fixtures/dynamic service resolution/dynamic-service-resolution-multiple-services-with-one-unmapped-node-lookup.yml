name: "dynamic service resolution multiple services with one unmapped node lookup"
enabled: true
overallSchema:
  shared: |
    directive @dynamicServiceResolution on FIELD_DEFINITION

    type Query {
      node(id: ID!): Node @dynamicServiceResolution
    }

    interface Node {
      id: ID!
    }
  RepoService: |
    type PullRequest implements Node {
      id: ID!
      description: String
    }
  IssueService: |
    type Issue implements Node {
      id: ID!
      issueKey: String
    }
underlyingSchema:
  shared: |
    type Query {
      echo: String
    }
  RepoService: |
    type Query {
      node(id: ID): Node
    }

    interface Node {
      id: ID!
    }

    type PullRequest implements Node {
      id: ID!
      description: String
    }
  IssueService: |
    type Query {
      node(id: ID): Node
    }

    interface Node {
      id: ID!
    }

    type Issue implements Node {
      id: ID!
      issueKey: String
    }
query: |
  {
    commit: node(id: "commit:id-123") {
      ... on PullRequest {
        id
        description
      }
    }
    issue: node(id: "issue/id-123") {
      ... on Issue {
        id
        issueKey
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: "IssueService"
    request:
      query: |
        query ($v0: ID!) {
          issue: node(id: $v0) {
            id
            ... on Issue {
              issueKey
            }
          }
        }
      variables:
        v0: "issue/id-123"
    # language=JSON
    response: |-
      {
        "data": {
          "issue": {
            "id": "issue/id-123",
            "issueKey": "ISSUE-1"
          }
        }
      }
# language=JSON
response: |-
  {
    "data": {
      "commit": null,
      "issue": {
        "id": "issue/id-123",
        "issueKey": "ISSUE-1"
      }
    },
    "errors": [
      {
        "message": "Could not resolve service for field: /commit",
        "locations": [],
        "path": [
          "commit"],
        "extensions": {
          "classification": "ExecutionAborted"
        }
      }
    ]
  }
