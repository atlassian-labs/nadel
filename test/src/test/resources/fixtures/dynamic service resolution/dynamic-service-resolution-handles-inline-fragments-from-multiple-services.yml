name: dynamic service resolution handles inline fragments from multiple services
enabled:
  current: true
  nextgen: true
overallSchema:
  Common: |
    directive @dynamicServiceResolution on FIELD_DEFINITION

    type Query {
      node(id: ID!): Node @dynamicServiceResolution
    }

    interface Node {
      id: ID!
    }
  RepoService: |
    type PullRequest implements Node {
      id: ID!
      description: String
    }
  IssueService: |
    type Issue implements Node {
      id: ID!
      issueKey: String
    }
underlyingSchema:
  Common: |
    type Query {
      echo: String
    }
  RepoService: |
    type Query {
      node(id: ID): Node
    }

    interface Node {
      id: ID!
    }

    type PullRequest implements Node {
      id: ID!
      description: String
    }
  IssueService: |
    type Query {
      node(id: ID): Node
    }

    interface Node {
      id: ID!
    }

    type Issue implements Node {
      id: ID!
      issueKey: String
    }
query: |
  {
    node(id: "pull-request:id-123") {
      # this fragment uses a type from the RepoService
      ... on PullRequest {
        id
        description
      }
      # and this one uses a type from IssueService
      ... on Issue {
        id
        issueKey
      }
    }
  }
variables: {}
serviceCalls:
  current:
    - serviceName: RepoService
      request:
        query: |
          query nadel_2_RepoService {
            node(id: "pull-request:id-123") {
              type_hint_typename__UUID: __typename
              ... on PullRequest {
                id
              }
              ... on PullRequest {
                description
              }
            }
          }
        variables: {}
        operationName: nadel_2_RepoService
      # language=JSON
      response: |-
        {
          "data": {
            "node": {
              "id": "pull-request:id-123",
              "description": "this is a pull request",
              "type_hint_typename__UUID": "PullRequest"
            }
          }
        }
  nextgen:
    - serviceName: RepoService
      request:
        query: |
          query {
            node(id: "pull-request:id-123") {
              __typename__type_filter__issueKey: __typename
              id
              ... on PullRequest {
                description
              }
            }
          }
        variables: {}
      # language=JSON
      response: |-
        {
          "data": {
            "node": {
              "__typename__type_filter__issueKey": "PullRequest",
              "id": "pull-request:id-123",
              "description": "this is a pull request"
            }
          }
        }
# language=JSON
response: |-
  {
    "data": {
      "node": {
        "id": "pull-request:id-123",
        "description": "this is a pull request"
      }
    }
  }
