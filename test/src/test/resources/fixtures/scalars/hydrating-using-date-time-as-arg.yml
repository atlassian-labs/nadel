name: "hydrating using date time as arg"
enabled: true
overallSchema:
  service: |
    type Query {
      foo: Foo
      successor(after: DateTime): Foo
    }
    type Foo {
      id: ID
      createdAt: DateTime
      successor: Foo @hydrated(service: "service" field: "successor" arguments: [{ name: "after" value: "$source.createdAt" }])
    }
    scalar DateTime
underlyingSchema:
  service: |
    type Query {
      foo: Foo
      successor(after: DateTime): Foo
    }
    type Foo {
      id: ID
      createdAt: DateTime
      successor: Foo
    }
    scalar DateTime
query: |
  query {
    foo {
      successor {
        id
      }
    }
  }
variables: { }
serviceCalls:
  - serviceName: "service"
    request:
      query: |
        query {
          foo {
            __typename__hydration__successor: __typename
            hydration__successor__createdAt: createdAt
          }
        }
      variables: { }
    # language=JSON
    response: |-
      {
        "data": {
          "foo": {
            "__typename__hydration__successor": "Foo",
            "hydration__successor__createdAt": "2022-03-09T05:01:50Z"
          }
        },
        "extensions": {}
      }
  - serviceName: "service"
    request:
      query: |
        query ($v0: DateTime) {
          successor(after: $v0) {
            id
          }
        }
      variables:
        v0: "2022-03-09T05:01:50Z"
    # language=JSON
    response: |-
      {
        "data": {
          "successor": {
            "id": "2023"
          }
        },
        "extensions": {}
      }
# language=JSON
response: |-
  {
    "data": {
      "foo": {
        "successor": {
          "id": "2023"
        }
      }
    }
  }
